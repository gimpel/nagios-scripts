#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require "rest-client"
require "json"

EXIT_OK = 0
EXIT_WARNING = 1
EXIT_CRITICAL = 2
EXIT_UNKNOWN = 3

@@options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  @@options[:url] = nil
  opts.on("-u", "--url URL", "Target url") do |url|
    @@options[:url] = url
  end
  @@options[:metric] = nil
  opts.on("-m", "--metric NAME[|NAME2|NAME3|...]", String, "Metric path string (multiples may be quoted and separated by | (not , as that would break graphite functions)") do |metric|
    @@options[:metric] = metric.split("|")
  end
  @@options[:shortname] = nil
  opts.on("-s", "--shortname SHORTNAME[,SHORTNAME2,SHORTNAME3...]", Array, "Metric short name used for performance data (accepts array)") do |shortname|
    @@options[:shortname] = shortname
  end
  @@options[:duration] = 5
  opts.on("-d", "--duration LENGTH", "Length, in minute of data to parse (default: 5)") do |duration|
    @@options[:duration] = duration
  end
  @@options[:warning] = nil
  opts.on("-w", "--warning VALUE[,VALUE2,VALUE3...]", Array, "Warning threshold") do |warning|
    @@options[:warning] = warning
  end
  @@options[:critical] = nil
  opts.on("-c", "--critical VALUE[,VALUE2,VALUE3...]", Array, "Critical threshold") do |critical|
    @@options[:critical] = critical
  end
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

if (@@options[:url].nil? || @@options[:metric].nil? || @@options[:warning].nil? || @@options[:critical].nil?)
  puts optparse
  exit 2
end


def url(m)
  base_url = @@options[:url]
  duration = @@options[:duration].to_s
  base_url + "/render/?target=" + m + "&format=json&from=-" + duration + "mins"
end


status = Array.new
message = ""
perfdata = "|"

@@options[:metric].each do |m|
  data = {}
  data["total"] = 0

  id = @@options[:metric].index(m)
  shortname = @@options[:shortname][id]
  warning = @@options[:warning][id].to_i
  critical = @@options[:critical][id].to_i

  shortname = m if @@options[:shortname][id].nil?
  warning = @@options[:warning][0].to_i if @@options[:warning][id].nil?
  critical = @@options[:critical][0].to_i if @@options[:critical][id].nil?

  JSON.parse(RestClient.get(url(m))).each do |cache|
    data["#{cache['target']}"] = 0
    count = 0
    cache["datapoints"].each do |point|
      unless (point[0].nil?)
        data["#{cache['target']}"] += point[0]
        count += 1
      end
    end
    if (count == 0)
      count = 1
    end
    data["#{cache['target']}"] /= count
    data["total"] += data["#{cache['target']}"]
  end

  total = data["total"].to_i
  perfdata += " #{shortname}=#{total};#{warning};#{critical};"
  if (message == "" )
    message += "#{shortname}: #{total}"
  else
    message += ", #{shortname}: #{total}"
  end

  if (critical > warning)
    if (total >= critical)
      status << "CRITICAL"
    elsif (total >= warning)
      status << "WARNING"
    else
      status << "OK"
    end
  else
    if (total <= critical)
      status << "CRITICAL"
    elsif (total <= warning)
      status << "WARNING"
    else
      status << OK
    end
  end

end

if (!status.grep(/CRITICAL/).empty?)
  puts "CRITICAL - #{message} #{perfdata}"
  exit EXIT_CRITICAL
elsif (!status.grep(/WARNING/).empty?)
  puts "WARNING - #{message} #{perfdata}"
  exit EXIT_WARNING
else
  puts "OK - #{message} #{perfdata}"
  exit EXIT_OK
end

